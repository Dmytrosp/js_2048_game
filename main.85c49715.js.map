{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","cell","querySelectorAll","startMessage","winText","loseText","scorePlace","gameOver","score","matrix","makeMatrix","indexRow","length","indexCell","indexOf","className","textContent","classList","add","clearMatrix","makeOneRandomCell","emptyCells","i","j","push","randomIndex","randomCell","Math","floor","random","numToInput","getRandomTwoOrFour","makeStartPairOfCell","numOfNewCell","maxRowIndex","maxColumnIndex","randomRowCell","randomColumnCell","randomValue","moveCells","turn","moveUp","moveDown","moveRight","moveLeft","indexColumn","checkWin","row","col","remove","gameOportunity","ifCellsNotEmpty","cellsPoints","addEventListener","press","preventDefault","keyCode"],"mappings":"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","file":"main.85c49715.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.button');\nconst cell = document.querySelectorAll('.field-cell');\nconst startMessage = document.querySelector('.message-start');\nconst winText = document.querySelector('.message-win');\nconst loseText = document.querySelector('.message-lose');\nconst scorePlace = document.querySelector('.game-score');\nlet gameOver = false;\n\nlet score = 0;\n\nconst matrix = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction makeMatrix() {\n  for (let indexRow = 0; indexRow < matrix.length; indexRow++) {\n    for (let indexCell = 0; indexCell < matrix[indexRow].length; indexCell++) {\n      const indexOf = (indexRow * 4) + indexCell;\n\n      cell[indexOf].className = 'field-cell';\n      cell[indexOf].textContent = '';\n\n      if (matrix[indexRow][indexCell] !== 0) {\n        cell[indexOf].classList.add(\n          `field-cell--${matrix[indexRow][indexCell]}`,\n        );\n        cell[indexOf].textContent = `${matrix[indexRow][indexCell]}`;\n      } else {\n        cell[indexOf].className = 'field-cell';\n        cell[indexOf].textContent = '';\n      }\n    }\n  }\n}\n\nfunction clearMatrix() {\n  for (let indexRow = 0; indexRow < matrix.length; indexRow++) {\n    for (let indexCell = 0; indexCell < matrix[indexRow].length; indexCell++) {\n      const indexOf = (indexRow * 4) + indexCell;\n\n      cell[indexOf].className = 'field-cell';\n      cell[indexOf].textContent = '';\n      matrix[indexRow][indexCell] = 0;\n    }\n  }\n}\n\nfunction makeOneRandomCell() {\n  const emptyCells = [];\n\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      if (matrix[i][j] === 0) {\n        emptyCells.push([i, j]);\n      }\n    }\n  }\n\n  const randomIndex = Math.floor(Math.random() * emptyCells.length);\n  const randomCell = emptyCells[randomIndex];\n\n  const numToInput = getRandomTwoOrFour();\n\n  matrix[randomCell[0]][randomCell[1]] = numToInput;\n}\n\nfunction makeStartPairOfCell() {\n  const maxRowIndex = matrix.length;\n  const maxColumnIndex = matrix[0].length;\n\n  let numOfNewCell = 0;\n\n  while (numOfNewCell < 2) {\n    const randomRowCell = Math.floor(Math.random() * maxRowIndex);\n    const randomColumnCell = Math.floor(Math.random() * maxColumnIndex);\n    const numToInput = getRandomTwoOrFour();\n\n    if (matrix[randomRowCell][randomColumnCell] !== 0) {\n      continue;\n    } else {\n      matrix[randomRowCell][randomColumnCell] = numToInput;\n      numOfNewCell++;\n    }\n  }\n}\n\nfunction getRandomTwoOrFour() {\n  const randomValue = Math.random();\n\n  if (randomValue < 0.9) {\n    return 2;\n  } else {\n    return 4;\n  }\n}\n\nfunction moveCells(turn) {\n  switch (turn) {\n    case 'Up':\n      moveUp();\n      break;\n\n    case 'Down':\n      moveDown();\n      break;\n\n    case 'Right':\n      moveRight();\n      break;\n\n    case 'Left':\n      moveLeft();\n      break;\n  }\n}\n\nfunction moveDown() {\n  for (let indexRow = 0; indexRow < matrix.length; indexRow++) {\n    for (let indexColumn = matrix[0].length - 1;\n      indexColumn >= 0; indexColumn--) {\n      if (matrix[indexColumn][indexRow] !== 0\n        && indexColumn !== matrix[0].length - 1\n        && matrix[indexColumn + 1][indexRow] === 0) {\n        matrix[indexColumn + 1][indexRow] = matrix[indexColumn][indexRow];\n        matrix[indexColumn][indexRow] = 0;\n        indexColumn += 2;\n      } else if (indexColumn < matrix[0].length - 1\n        && matrix[indexColumn][indexRow] === matrix[indexColumn + 1][indexRow]\n        && matrix[indexColumn][indexRow] !== 0) {\n        matrix[indexColumn + 1][indexRow] *= 2;\n        matrix[indexColumn][indexRow] = 0;\n\n        score += matrix[indexColumn + 1][indexRow];\n      }\n    }\n  }\n}\n\nfunction moveUp() {\n  for (let indexColumn = 0; indexColumn < matrix.length; indexColumn++) {\n    for (let indexRow = 0; indexRow < matrix[0].length; indexRow++) {\n      if (matrix[indexRow][indexColumn]\n        !== 0 && indexRow\n        !== 0 && matrix[indexRow - 1][indexColumn] === 0) {\n        matrix[indexRow - 1][indexColumn] = matrix[indexRow][indexColumn];\n        matrix[indexRow][indexColumn] = 0;\n        indexRow -= 2;\n      } else if (indexRow > 0\n        && matrix[indexRow][indexColumn] === matrix[indexRow - 1][indexColumn]\n        && matrix[indexRow][indexColumn] !== 0) {\n        matrix[indexRow - 1][indexColumn] *= 2;\n        matrix[indexRow][indexColumn] = 0;\n\n        score += matrix[indexRow - 1][indexColumn];\n      }\n    }\n  }\n}\n\nfunction moveLeft() {\n  for (let indexRow = 0; indexRow < matrix.length; indexRow++) {\n    for (let indexColumn = 0; indexColumn < matrix[0].length; indexColumn++) {\n      if (matrix[indexRow][indexColumn]\n        !== 0 && indexColumn\n        !== 0 && matrix[indexRow][indexColumn - 1] === 0) {\n        matrix[indexRow][indexColumn - 1] = matrix[indexRow][indexColumn];\n        matrix[indexRow][indexColumn] = 0;\n        indexColumn -= 2;\n      } else if (indexColumn > 0\n        && matrix[indexRow][indexColumn] === matrix[indexRow][indexColumn - 1]\n        && matrix[indexRow][indexColumn] !== 0) {\n        matrix[indexRow][indexColumn - 1] *= 2;\n        matrix[indexRow][indexColumn] = 0;\n\n        score += matrix[indexRow][indexColumn - 1];\n      }\n    }\n  }\n}\n\nfunction moveRight() {\n  for (let indexRow = 0; indexRow < matrix[0].length; indexRow++) {\n    for (let indexColumn = matrix.length - 1; indexColumn >= 0; indexColumn--) {\n      if (matrix[indexRow][indexColumn] !== 0\n        && indexColumn !== matrix.length - 1\n        && matrix[indexRow][indexColumn + 1] === 0) {\n        matrix[indexRow][indexColumn + 1] = matrix[indexRow][indexColumn];\n        matrix[indexRow][indexColumn] = 0;\n        indexColumn += 2;\n      } else if (matrix[indexRow][indexColumn]\n        === matrix[indexRow][indexColumn + 1]\n        && matrix[indexRow][indexColumn] !== 0) {\n        matrix[indexRow][indexColumn + 1] *= 2;\n        matrix[indexRow][indexColumn] = 0;\n\n        score += matrix[indexRow][indexColumn + 1];\n      }\n    }\n  }\n}\n\nbutton.addEventListener('click', () => {\n  if (button.textContent === 'Start') {\n    button.textContent = 'Restart';\n    startMessage.classList.add('hidden');\n    button.classList.add('restart');\n    makeStartPairOfCell();\n    makeMatrix(matrix);\n  } else {\n    loseText.classList.add('hidden');\n    scorePlace.textContent = 0;\n    score = 0;\n    clearMatrix();\n    makeStartPairOfCell();\n    makeMatrix(matrix);\n  }\n});\n\ndocument.addEventListener('keydown', (press) => {\n  press.preventDefault();\n  // вгору\n\n  checkWin();\n\n  const indicator = ifCellsNotEmpty();\n\n  if (indicator === 16) {\n    gameOportunity();\n  }\n\n  if (gameOver) {\n    return;\n  }\n\n  if (press.keyCode === 38) {\n    const turn = 'Up';\n\n    moveCells(turn);\n  }\n\n  // вниз\n  if (press.keyCode === 40) {\n    const turn = 'Down';\n\n    moveCells(turn);\n  }\n\n  //  вправо\n  if (press.keyCode === 39) {\n    const turn = 'Right';\n\n    moveCells(turn);\n  }\n\n  //  вліво\n  if (press.keyCode === 37) {\n    const turn = 'Left';\n\n    moveCells(turn);\n  }\n\n  scorePlace.textContent = `${score}`;\n  makeOneRandomCell();\n  makeMatrix();\n});\n\nfunction checkWin() {\n  for (let row = 0; row < matrix.length; row++) {\n    for (let col = 0; col < matrix[row].length; col++) {\n      if (matrix[row][col] === 2048) {\n        winText.classList.remove('hidden');\n        gameOver = true;\n        break;\n      }\n    }\n  }\n}\n\nfunction gameOportunity() {\n  for (let i = 0; i < matrix[0].length; i++) {\n    for (let j = 0; j < matrix.length; j++) {\n      if (\n        (i < 3 && matrix[i][j] === matrix[i + 1][j])\n        || (j < 3 && matrix[i][j] === matrix[i][j + 1])\n      ) {\n        gameOver = false;\n\n        return;\n      }\n    }\n  }\n\n  gameOver = true;\n  loseText.classList.remove('hidden');\n}\n\nfunction ifCellsNotEmpty() {\n  let cellsPoints = 0;\n\n  for (let indexRow = 0; indexRow < matrix.length; indexRow++) {\n    for (let indexColumn = 0; indexColumn < matrix.length; indexColumn++) {\n      if (matrix[indexRow][indexColumn] !== 0) {\n        cellsPoints += 1;\n      }\n    }\n  }\n\n  return cellsPoints;\n}\n"]}